unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, VclTee.TeeGDIPlus, VclTee.TeEngine,
  VclTee.Series, Vcl.ExtCtrls, VclTee.TeeProcs, VclTee.Chart, Vcl.StdCtrls,
  Math, VclTee.BubbleCh;

type
  TForm1 = class(TForm)
    Edit1: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Edit5: TEdit;
    Edit6: TEdit;
    Edit7: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Edit8: TEdit;
    Edit9: TEdit;
    Label8: TLabel;
    Label9: TLabel;
    Edit10: TEdit;
    Chart1: TChart;
    Series1: TBubbleSeries;
    Button1: TButton;
    Button2: TButton;
    procedure Button1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  flag: Boolean;
  Vx, Vy, x, y, Fx, Fy: array [1 .. 100, 1 .. 100] of Extended;
  sl, sr, sb, st, dx, dy, a1, a2, r0: real;
  n: integer;
  di: array [1 .. 8] of integer = (-1, 0, 1, 0, -1, -1, 1, 1);
  dj: array [1 .. 8] of integer = (0, -1, 0, 1, -1, 1, 1, -1);

implementation

{$R *.dfm}

function BCx(p: integer): integer;
begin
  if p < 1 then
  begin
    BCx := p + n;
    dx := -a1 * n
  end
  else if p > n then
  begin
    BCx := p - n;
    dx := a1 * n
  end
  else
    dx := 0;
end;

function BCy(p: integer): integer;
begin
  if p < 1 then
  begin
    BCy := p + n;
    dy := -a2 * n
  end
  else if p > n then
  begin
    BCy := p - n;
    dy := a2 * n
  end
  else
    dy := 0;
end;


procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  flag := False;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  flag := False;
end;

procedure TForm1.Button2Click(Sender: TObject);
var
  dx, dy, dax, day, RSize, m, Temp, kb, x0, tt, dist, f, S, Sum, norma, d, sigma,
    E0, E_p, t, dt, aa, r: double;
  n, i, j, k: integer;
  count2: real;
begin
  Randomize;

  flag := True;

  Series1.Clear;

  sl := StrToFloat(Edit1.Text);
  sr := StrToFloat(Edit2.Text);
  sb := StrToFloat(Edit3.Text);
  st := StrToFloat(Edit4.Text);
  RSize := StrToFloat(Edit5.Text);
  n := StrToInt(Edit6.Text);
  dt := StrToFloat(Edit7.Text);
  m := StrToFloat(Edit8.Text);
  count2 := n / 2;

  { for i := 1 to count do // ініціалізація
    for j := 1 to count do
    if i < count2 then
    color[i, j] := 1
    else
    color[i, j] := 2; }


  Temp := StrToFloat(Edit9.Text);
  kb := 1.38E-23;
  aa := 0.053 * 1.6E-19;
  x0 := 2.886E-10;
  a1 := (sr - sl) / n;
  a2 := (st - sb) / n;
  sigma := 119 * kb;
  r0 := StrToFloat(Edit10.Text);

  // Series2.Clear;

  Chart1.BottomAxis.Minimum := 0; // (sl - r) * 1E8;
  Chart1.BottomAxis.Maximum := r0 * (n + 1) * 1E8 * 1.1; // (sr + r) * 1E8;
  Chart1.LeftAxis.Minimum := 0; // (sb - r) * 1E8;
  Chart1.LeftAxis.Maximum := r0 * (n + 1) * 1E8 * 1.1; // (st + r) * 1E8;



  tt := 0;
  for i := 1 to n do // ініціалізація
    for j := 1 to n do
    begin
      x[i, j] := r0 * i * 1.1; // sl + a1 / 2 + (i - 1) * a1;
      y[i, j] := r0 * j * 1.1; // sb + a2 / 2 + (j - 1) * a2;

      vx[i, j] := sqrt(2 * kb * Temp * ln(1 / random) / m) * sin(2 * pi * random);
      vy[i, j] := sqrt(2 * kb * Temp * ln(1 / random) / m) * sin(2 * pi * random);
    end;

  for i := 1 to n do
    for j := 1 to n do
      begin
        Series1.AddBubble(x[i, j] * 1E8, y[i, j] * 1E8, RSize * 1E8, '', clred);
      end;

  d := 2;
  t := 0;
  E0 := (n * d * kb * Temp);

  while flag do
    begin
      for i := 1 to n do
        for j := 1 to n do
        begin
          Fx[i, j] := 0;
          Fy[i, j] := 0;
        end;


      for i := 1 to n do
        for j := 1 to n do
          for k := 1 to 8 do
            begin
              r := sqrt(sqr(x[i, j] - (x[BCx(i + di[k]), BCy(j + dj[k])] + dx)) +
                        sqr(y[i, j] - (y[BCx(i + di[k]), BCy(j + dj[k])] + dy)));

              f := 24 * sigma / r * (2 * exp(12 * ln(r0 / r)) - exp(6 * ln(r0 / r)));


              Fx[i, j] := Fx[i, j] + f / r * (x[i, j] - (x[BCx(i + di[k]), BCy(j + dj[k])] + dx));
              Fy[i, j] := Fy[i, j] + f / r * (y[i, j] - (y[BCx(i + di[k]), BCy(j + dj[k])] + dy));
            end;

    for i := 1 to n do
      for j := 1 to n do
        begin
          Vx[i, j] := Vx[i, j] + Fx[i, j] / m * dt;
          Vy[i, j] := Vy[i, j] + Fy[i, j] / m * dt;

          x[i, j] := x[i, j] + Vx[i, j] * dt;
          y[i, j] := y[i, j] + Vy[i, j] * dt;
        end;

      Series1.Clear;
      for i := 1 to n do
        for j := 1 to n do
          begin
            Series1.AddBubble(x[i, j] * 1E8, y[i, j] * 1E8, RSize * 1E8, '', clred);
          end;

      Application.ProcessMessages;
      t := t + dt;
     end;

end;

end.
