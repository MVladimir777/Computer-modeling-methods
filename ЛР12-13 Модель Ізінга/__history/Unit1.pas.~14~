unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, VclTee.TeeGDIPlus, Vcl.StdCtrls,
  VCLTee.TeEngine, VCLTee.Series, Vcl.ExtCtrls, VCLTee.TeeProcs, VCLTee.Chart, Math;

type
  TForm1 = class(TForm)
    Chart1: TChart;
    Series1: TPointSeries;
    Button1: TButton;
    Button2: TButton;
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    Label3: TLabel;
    Edit3: TEdit;
    Label4: TLabel;
    Edit4: TEdit;
    Label5: TLabel;
    Edit5: TEdit;
    Label6: TLabel;
    Edit6: TEdit;
    Label10: TLabel;
    Chart2: TChart;
    Series2: TLineSeries;
    Label7: TLabel;
    Edit7: TEdit;
    Edit8: TEdit;
    Label8: TLabel;
    Edit9: TEdit;
    Label9: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
  e = 1.6e-19;
  h = 6.62e-34 / (2* pi);
  me = 9.1e-31;
  kb = 1.38e-23;
  ub = e * h / (2 * me);

var
  Form1: TForm1;
  flag: Boolean;
  n, Steps: Integer;
  B, T, J1, B_max, T_max, dB, dT: Real;
  S: array [1..100, 1..100] of Real;
  di: array [1 .. 4] of Integer = (-1, 0, 1, 0);
  dj: array [1 .. 4] of Integer = (0, 1, 0, -1);

implementation

{$R *.dfm}

function bk(ii: integer): integer;
begin
  if ii < 1
    then ii := ii + n;

  if ii > n
    then ii := ii - n;

  bk := ii;
end;

procedure visual(S: Real; i, j: Integer);
begin
  if S = 1
    then
      begin
        Form1.Series1.AddXY(i + 0.1, j, '', clRed);
        //Form1.Series1.AddXY(i - 0.1, j, '', clBlue);
      end
    else
      begin
        Form1.Series1.AddXY(i + 0.1, j, '', clBlue);
        //Form1.Series1.AddXY(i - 0.1, j, '', clRed);
      end;
end;

procedure A1;                          //(var B, T: Real; var S: array of Real);
var
  i, j: Integer;
  q, P: Real;
begin
  q := ub * B / (kb * T);
  P := exp(q) / (exp(q) + exp(-q));

  for i := 1 to n do
    for j := 1 to n do
      begin
        if random < 0.5 //P
          then
            begin
              S[i, j] := 1;
            end
          else
            begin
              S[i, j] := -1;
            end;
        visual(S[i, j], i, j);
      end;
end;

function A2: Real;                                      //(var S: array of Real)
var
  i, j: Integer;
  K: Real;
begin
  K := 0;

  for i := 1 to n do
    for j := 1 to n do
      begin
        K := K + S[i, j];
      end;

  A2 := ub * K;
end;

procedure A3;      //(var S: array of Real; var B, T: Real; var Steps: Integer);
var
  L, i, j, o: Integer;
  U, q, p, K: Real;
begin
  K := 0;

  for L := 1 to n * n * Steps do
  //while flag  do                 //and (abs(K) < n * n)
    begin
      i := random(n) + 1;
      j := random(n) + 1;

      U := -ub * B * S[i, j];

      for o := 1 to 4 do
        begin
          U := U - J1 * S[i, j] * S[bk(i + di[o]), bk(j + dj[o])] / 2;
        end;

      q := -U / (kb * T);
      P := exp(q) / (exp(q) + exp(-q));

      if random < P
        then  S[i, j] := S[i, j]
        else  S[i, j] := -S[i, j];


      visual(S[i, j], i, j);
      Application.ProcessMessages;

      K := 0;
      for i := 1 to n do
        for j := 1 to n do
          begin
            K := K + S[i, j];
          end;
       Form1.label10.Caption := floattostr(K);
    end;

end;

procedure A4;      //(var S: array of Real; var B, T: Real; var Steps: Integer);
begin
  A1;                                                               //(B, T, S);
  A3;                                                        //(S, 0, T, Steps);
end;

procedure A6(var T: Real);
var
  Mr: Real;
begin
  B := 0;

  A1;                                                        //(S, B, T, Steps);

  while flag and (B <= B_max) do
    begin
      A3;                                                    //(S, B, T, Steps);
      Mr := A2;                                                           //(S);

      Form1.Series2.AddXY(B, Mr * 1e21);
      Application.ProcessMessages;
      B := B + dB;
    end;

  while flag and (B >= -B_max) do
    begin
      A3;
      Mr := A2;

      Form1.Series2.AddXY(B, Mr * 1e21);
      Application.ProcessMessages;
      B := B - dB;
    end;

  while flag and (B <= B_max) do
    begin
      A3;
      Mr := A2;

      Form1.Series2.AddXY(B, Mr * 1e21);
      Application.ProcessMessages;
      B := B + dB;
    end;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  flag := False;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  flag := False;
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  Randomize;

  flag := True;

  Series1.Clear;
  Series2.Clear;

  n := StrToInt(Edit1.Text);
  B := StrToFloat(Edit2.Text);
  T := StrToFloat(Edit3.Text);
  J1 := StrToFloat(Edit4.Text);
  B_max := StrToFloat(Edit5.Text);
  T_max := StrToFloat(Edit6.Text);
  dB := StrToFloat(Edit7.Text);
  dT := StrToFloat(Edit8.Text);
  steps := StrToInt(Edit9.Text);

  //A1;  A3;
  A6(T);

end;

end.
